Here is an algorithm competition problem described in MiniZinc. Please provide a correct C++ program for this problem and ensure that the program's complexity is as low as possible. The answer should include only the C++ program. Don't add explanation outside the program. Don't use markdown format. 

int: N;
int: M;
array[1..N, 1..M] of 0..1: stairs;
array[1..N, 1..M] of int: number;
int: p;
function var int: distance(var int: begin, var int: target) =
    if target >= begin then target - begin
    else target + M - begin endif;
function var int: round_next(var int: begin, var int: d, var int: len) =
    if (begin + d) <= len then begin + d
    else ((begin + d - 1) mod len) + 1 endif;
function var int: go_up(array[1..M] of 0..1: layer_stairs, array[1..M] of int: layer_number, var int: enter) =
    let{
        array[int] of int: room_with_stairs = [i | i in 1..M where layer_stairs[i] == 1];
        var int: stair_len = card(index_set(room_with_stairs));
        var int: d = min(i in 1..M where layer_stairs[i] == 1)(distance(enter, i));
        var int: begin = round_next(enter, d, M);
        var int: begin_loc;
        constraint room_with_stairs[begin_loc] = begin;
    } in room_with_stairs[round_next(begin_loc, layer_number[enter] - 1, stair_len)];
array[1..N] of var int: code;
constraint code[1] = p + 1;
constraint forall(i in 1..N-1)(code[i + 1] = go_up(stairs[i, 1..M], number[i, 1..M], code[i]));
var int: answer = sum(i in 1..N)(number[i, code[i]]) mod 20123;
solve satisfy;
output[show(answer)];
