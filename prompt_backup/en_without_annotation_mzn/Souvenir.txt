Here is an algorithm competition problem described in MiniZinc. Please provide a correct C++ program for this problem and ensure that the program's complexity is as low as possible. The answer should include only the C++ program. Don't add explanation outside the program. Don't use markdown format. 

int: T;
int: N;
int: M;
array[1..T, 1..N] of int: P;
array[0..T] of var 0..10000: coin;
array[1..T, 1..N] of var int: buy;
array[0..T, 1..N] of var int: souvenir;
constraint coin[0] == M;
constraint forall(j in 1..N) (souvenir[0, j] == 0);
constraint forall(j in 1..N) (souvenir[T, j] == 0);
constraint forall(i in 1..T, j in 1..N) (souvenir[i, j] >= 0);
constraint forall(i in 0..T) (coin[i] >= 0);
constraint forall(i in 1..T, j in 1..N) (souvenir[i, j] = souvenir[i - 1, j] + buy[i, j]);
constraint forall(i in 1..T) (coin[i] = coin[i - 1] - sum(j in 1..N) (buy[i, j] * P[i, j]));
solve maximize coin[T];
output ["\(coin[T])"];
